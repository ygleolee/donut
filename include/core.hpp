#pragma once

#include "geometry.hpp"

#include <vector>
#include <string>

// key ideas:
// 1. monitor is XY-plane, Z-axis comes out of screen, origin at center of screen.
// 2. the object is always located in the square [-100, 100] x [-100, 100]
// 3. 'canvas' is the screen (XY-plane) divided into pixels, depending on the resolution.

// TODO: select brightness depending on terminal resolution
// TODO: change points generated by shapes.cpp depending on terminal resolution
// TODO: customizable rotate speed
// TODO: edit each necessary pixel instead of re-printing everything?
// TODO: cache the data points instead of calculating on the fly
// TODO: light blocked by other parts of the object ?!

// borders of the real plane ([-range, range] x [-range, range])
const dbl RANGE = 100;

// character height/width (TODO: somehow get this from the terminal)
const dbl RATIO = 1.75;

const std::string grayscale = "......,,,-~:;=!*#$@";
// const std::string grayscale = ".......................................................'`^,:;Il!i><~+_-?][}{1)(|/tfjrxnuvczXYUJCLQ0OZmwqpdbkhao*#MW&8%B@$";

const std::array<int, 4> dx = { 0, 0, 1, -1 };
const std::array<int, 4> dy = { 1, -1, 0, 0 };

void rotate_shape(std::vector<vec>& points, std::vector<vec>& normals, vec degrees);

void draw(
  std::vector<std::vector<dbl>>& canvas,  // canvas to draw pixels onto
  std::vector<vec>& points,                // points in R^3 of the shape
  std::vector<vec>& normals,               // normal vectors of each corresponding point
  dbl viewer,                              // z value of viewer
  vec light,                               // vector if PARALLEL, point in R^3 if POINT
  light_type light_src_type                // PARALLEL or POINT
);

void animate_simple(
  std::vector<vec> points,    // points in R^3 of the shape
  std::vector<vec>& normals,  // normal vectors of each corresponding point
  std::array<dbl, 3> degrees, // angles to rotate about each axis every frame (in radian)
  dbl viewer,                 // z value of viewer
  vec light,                  // vector if PARALLEL, point in R^3 if POINT
  light_type light_src_type,  // PARALLEL or POINT
  dbl interval                // interval between each frame
);

