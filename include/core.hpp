#pragma once

#include "geometry.hpp"

#include <vector>
#include <string>

// key ideas:
// 1. monitor is XY-plane, Z-axis comes out of screen, origin at center of screen.
// 2. the object is always located in the square [-100, 100] x [-100, 100]
// 3. 'canvas' is the screen (XY-plane) divided into pixels, depending on the resolution.
// (only consider square in the center, adjust the rectangle borders when displaying)

// TODO: select brightness depending on terminal resolution
// TODO: change points generated by shapes.cpp depending on terminal resolution
// TODO: customizable rotate speed
// TODO: edit each necessary pixel instead of re-printing everything?
// TODO: cache the data points instead of calculating on the fly
// TODO: light blocked by other parts of the object ?!

// borders of the real plane ([-range, range] x [-range, range])
const dbl RANGE = 100;

const std::string grayscale = "......,,,-~:;=!*#$@";
// const std::string grayscale = ".......................................................'`^,:;Il!i><~+_-?][}{1)(|/tfjrxnuvczXYUJCLQ0OZmwqpdbkhao*#MW&8%B@$";

void draw(std::vector<std::vector<char>>& canvas, std::vector<vec>& points, std::vector<vec>& normals, dbl viewer, vec light, light_type light_src_type);

void rotate(std::vector<vec>& points, std::vector<vec>& normals, vec degrees);

void animate(std::vector<vec> points, std::vector<vec>& normals, std::array<dbl, 3> degrees, dbl viewer, vec light, light_type light_src_type);

